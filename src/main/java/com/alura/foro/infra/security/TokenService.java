package com.alura.foro.infra.security;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.alura.foro.modelo.Usuario;
import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTCreationException;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.DecodedJWT;

@Service
public class TokenService {
	
	@Value("${api.security.secret}")
	private String apiSecret;
	
	private String ApiIssuer="cmz_foro_alura";
	
	/**
	 * Metodo de Gerneracion de Token.
	 * @param usuario
	 * @return String con el Token.
	 */
	public String generarToken (Usuario usuario) {
		try {
		    Algorithm algorithm = Algorithm.HMAC256(apiSecret);
		    String token = JWT.create()
		        .withIssuer(ApiIssuer)
		        .withSubject(usuario.getNombre())
		        .withClaim("id", usuario.getId())
		        .withExpiresAt(generarFechaExpiracion())
		        .sign(algorithm);
		    
		    return token;
		    
		} catch (JWTCreationException exception){
		    throw new RuntimeException("the JWT token can not be generated by error");
		}
	}
	
	private Instant generarFechaExpiracion() {
		return LocalDateTime.now().plusHours(1).toInstant(ZoneOffset.of("-06:00"));
		
	}
	/**
	 * Metodo de validacion de Token
	 * @param token
	 * @return String con nombre de Usuario
	 * @exception RuntimeException: Token nullo o usuario de token nullo.
	 * @exception JWTVerificationException si la firma del token es invalida
	 */
	public String getSubject(String token) {
        if (token == null) {
            throw new RuntimeException("Token can not be null, Token no puede ser nulo");
        }
        DecodedJWT verifier = null;
        try {
            Algorithm algorithm = Algorithm.HMAC256(apiSecret); // validando firma
            verifier = JWT.require(algorithm)
                    .withIssuer(ApiIssuer)
                    .build()
                    .verify(token);
            
            verifier.getSubject();
        } catch (JWTVerificationException exception) {
            System.out.println(exception.toString());
        }
        if (verifier.getSubject() == null) {
            throw new RuntimeException("Token invalido");
        }
        return verifier.getSubject();
    }

}
